if({{graphby}} == "Site"){
L2_lum$Site = revalue(L2_lum$Site, c("Distal_Colon"="DC", "Proximal_Colon" = "PC", "Cecum" ="Cec","Ileum"="Ile", "Jejunum"="Jej", "Duodenum"= "Duo"))
L2_lum$Site = factor(L2_lum$Site, levels=c("Duo", "Jej", "Ile", "Cec", "PC", "DC"))
}
else if ({{graphby}}=="Type"){
L2_lum$Site = revalue(L2_lum$Site, c("Luminal"="Lum", "Mucosal" = "Muc"))
}
cols <- fillvector
ggplot(data=L2_lum, aes(x=Site, y=Value, fill=Taxa)) +
geom_bar(stat="identity")+
#scale_fill_paletteer_d(palette="colorBlindness::SteppedSequential5Steps") +
#scale_fill_paletteer_d(palette="dutchmasters::milkmaid") +
#scale_fill_paletteer_d("tvthemes::rickAndMorty")+
#scale_fill_paletteer_d("ggsci::category20_d3")+
scale_fill_manual(values = cols)+
theme(legend.position = "none")+
theme_cowplot(12) +
ylab("% Relative Abundance") +
xlab("")+
labs(fill="") +
ggtitle(titlestring) +
theme(legend.position="top") +
theme(plot.title = element_text(hjust = 0.5))+
#guides(fill=guide_legend(nrow=8, byrow=TRUE)) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
}
L6_lum <- generate_L6_taxa_plots("CS-Facility-Analysis/Taxa-Barplots/Luminal_level-6.RDS", "Luminal ( > 0.1% Relative Abundance)", ".*g__", assign_cols, "Site")
L6_muc <-generate_L6_taxa_plots("CS-Facility-Analysis/Taxa-Barplots/Mucosal_level-6.RDS","Mucosal ( > 0.1% Relative Abundance)", ".*g__",assign_cols, "Site")
lum_rds_filepath <- print(here("CS-Facility-Analysis/Taxa-Barplots/Luminal_level-6.RDS"))
L6_lum <- generate_L6_taxa_plots(lum_rds_filepath, "Luminal ( > 0.1% Relative Abundance)", ".*g__", assign_cols, "Site")
get_genera_from_plot <- function(filepath){
L2_lum<-readr::read_rds(here(filepath))
L2_lum<- as.matrix(L2_lum)
L2_lum<-make_relative(L2_lum)
L2_lum<-as.data.frame(t(L2_lum))
toptaxa<- rowMeans(L2_lum)
L2_lum$averageRA <-toptaxa/6
L2_lum <- L2_lum %>% mutate(keeptaxa = ifelse(averageRA >0.001, row.names(L2_lum), "Other"))
L2_lum <-select(L2_lum,-averageRA)
taxa<-L2_lum$keeptaxa
L2_lum <- select(L2_lum,-keeptaxa)
L2_lum <- as.matrix(sapply(L2_lum,as.numeric))
L2_lum <- as.data.frame(prop.table(L2_lum,2))
taxa<-gsub(".*g__","",taxa )
L2_lum$Taxa <-taxa
return(unique(L2_lum$Taxa))
}
labels_lum <- get_genera_from_plot("CS-Facility-Analysis/Taxa-Barplots/Luminal_level-6.RDS")
labels_muc <- get_genera_from_plot("CS-Facility-Analysis/Taxa-Barplots/Mucosal_level-6.RDS")
#Find out how many taxa need to be assigned colors
labels_all <- union(labels_lum, labels_muc)
#Generate that many colors
assign_cols <- paletteer_d("ggsci::category20_d3", 21)
#Generate that many colors
assign_cols <- paletteer_d("ggsci::category20_d3", 20)
add_cols <- paletteer_d("dutchmasters::milkmaid",1)
assign_cols <- c(assign_cols,add_cols)
#Match taxa to colors and then use in scale_fill_manual
names(assign_cols)=labels_all
readr::write_rds(assign_cols,here("CS-Facility-Analysis/Taxa-Barplots/assign_cols.RDS"))
generate_L6_taxa_plots <- function(path_to_RDS, titlestring,greppattern, fillvector, graphby){
titlestring<-c(titlestring)
L2_lum<-readRDS(path_to_RDS)
L2_lum<- as.matrix(L2_lum)
L2_lum<-make_relative(L2_lum)
L2_lum<-as.data.frame(t(L2_lum))
toptaxa<- rowMeans(L2_lum)
L2_lum$averageRA <-toptaxa/6
L2_lum <- L2_lum %>% mutate(keeptaxa = ifelse(averageRA >0.001, row.names(L2_lum), "Other"))
L2_lum <-select(L2_lum,-averageRA)
taxa<-L2_lum$keeptaxa
L2_lum <- select(L2_lum,-keeptaxa)
L2_lum <- as.matrix(sapply(L2_lum,as.numeric))
L2_lum <- as.data.frame(prop.table(L2_lum,2))
taxa<-gsub(greppattern,"",taxa )
L2_lum$Taxa <-taxa
L2_lum<- pivot_longer(L2_lum, -c(Taxa), values_to ="Value", names_to ="Site")
L2_lum$Value <- L2_lum$Value * 100
if({{graphby}} == "Site"){
L2_lum$Site = revalue(L2_lum$Site, c("Distal_Colon"="DC", "Proximal_Colon" = "PC", "Cecum" ="Cec","Ileum"="Ile", "Jejunum"="Jej", "Duodenum"= "Duo"))
L2_lum$Site = factor(L2_lum$Site, levels=c("Duo", "Jej", "Ile", "Cec", "PC", "DC"))
}
else if ({{graphby}}=="Type"){
L2_lum$Site = revalue(L2_lum$Site, c("Luminal"="Lum", "Mucosal" = "Muc"))
}
cols <- fillvector
ggplot(data=L2_lum, aes(x=Site, y=Value, fill=Taxa)) +
geom_bar(stat="identity")+
#scale_fill_paletteer_d(palette="colorBlindness::SteppedSequential5Steps") +
#scale_fill_paletteer_d(palette="dutchmasters::milkmaid") +
#scale_fill_paletteer_d("tvthemes::rickAndMorty")+
#scale_fill_paletteer_d("ggsci::category20_d3")+
scale_fill_manual(values = cols)+
theme(legend.position = "none")+
theme_cowplot(12) +
ylab("% Relative Abundance") +
xlab("")+
labs(fill="") +
ggtitle(titlestring) +
theme(legend.position="top") +
theme(plot.title = element_text(hjust = 0.5))+
#guides(fill=guide_legend(nrow=8, byrow=TRUE)) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
}
lum_rds_filepath <- print(here("CS-Facility-Analysis/Taxa-Barplots/Luminal_level-6.RDS"))
L6_lum <- generate_L6_taxa_plots(lum_rds_filepath, "Luminal ( > 0.1% Relative Abundance)", ".*g__", assign_cols, "Site")
L6_lum
lum_rds_filepath <- print(here("CS-Facility-Analysis/Taxa-Barplots/Mucosal_level-6.RDS"))
muc_rds_filepath <- print(here("CS-Facility-Analysis/Taxa-Barplots/Mucosal_level-6.RDS"))
L6_muc <-generate_L6_taxa_plots(muc_rds_filepath,"Mucosal ( > 0.1% Relative Abundance)", ".*g__",assign_cols, "Site")
set.seed(100) # Initialize random number generator for reproducibility
#export your rep-seqs.fna file output from deblur denoise-16S
here::i_am("../MouseBiogeography-RProj/Deblur_taxonomy_assignment_UCLA.R")
taxa <- assignTaxonomy("../Regional-Mouse-Biogeography-Analysis/repseqs-Regional-Combat-ASV.tsv",
"../../16S_Taxonomy_Classifiers/silva_nr99_v138.1_wSpecies_train_set.fa.gz", multithread=TRUE)  # update directory with the deblur all.seqs.fa output file and with the most recent Silva 99% OTU database
##################Assign Taxonomy after running DeBlur for denoising reads########################
library(dada2)
set.seed(100) # Initialize random number generator for reproducibility
taxa <- assignTaxonomy("../Regional-Mouse-Biogeography-Analysis/repseqs-Regional-Combat-ASV.tsv",
"../../16S_Taxonomy_Classifiers/silva_nr99_v138.1_wSpecies_train_set.fa.gz", multithread=TRUE)  # update directory with the deblur all.seqs.fa output file and with the most recent Silva 99% OTU database
taxa <- addSpecies(taxa, "../../16S_Taxonomy_Classifiers/silva_species_assignment_v138.1.fa.gz")
taxa[is.na(taxa)] <- ""
taxonomy<-paste("k__",taxa[,1],"; ","p__",taxa[,2],"; ","c__",taxa[,3],"; ","o__",taxa[,4],"; ","f__",taxa[,5],"; ","g__",taxa[,6],"; ","s__",taxa[,7],sep="")
taxonomy <- as.data.frame(taxonomy)
output<-cbind(taxa, taxonomy)
readr::write_csv(output, "../Regional-Mouse-Biogeography-Analysis/UCLA_taxonomy_assignments.csv")
#################Split rep-seqs FASTA file into two columns (so you have the QIIME gibberish in column A and the ASV sequence in column B)########################
library(dplyr)
library(tidyr)
fasta<- read.table("dna-sequences-fasta.txt")
fasta2<-fasta %>% separate(V1, c("ASV","QIIME_sequence"), sep = "([>])")
fasta<- read.table("../Regional-Mouse-Biogeography-Analysis/repseqs-Regional-Combat-ASV.tsv")
fasta2<-fasta %>% separate(V1, c("ASV","QIIME_sequence"), sep = "([>])")
fasta2[fasta2==""]<-NA
ASV <- fasta2$ASV
fasta3 <- data.frame(ASV)
fasta3 <-as.data.frame(fasta3[-1,])
QIIME_seqs <- data.frame(fasta2$QIIME_sequence)
QIIME_seqs <- data.frame(QIIME_seqs[-5792,])  #modify the number to be the number of the last row
fasta3$QIIME_seqs<- QIIME_seqs$QIIME_seqs..5792... #modify the number to be the number of the last row
finalfasta<-na.omit(fasta3)
fasta<- read.table("../Regional-Mouse-Biogeography-Analysis/repseqs-Regional-Combat-ASV.tsv")
fasta2<-fasta %>% separate(V1, c("ASV","QIIME_sequence"), sep = "([>])")
fasta2[fasta2==""]<-NA
ASV <- fasta2$ASV
fasta3 <- data.frame(ASV)
fasta3 <-as.data.frame(fasta3[-1,])
QIIME_seqs <- data.frame(fasta2$QIIME_sequence)
View(QIIME_seqs)
QIIME_seqs <- data.frame(QIIME_seqs[-646,])  #modify the number to be the number of the last row
fasta3$QIIME_seqs<- QIIME_seqs$QIIME_seqs..646... #modify the number to be the number of the last row
finalfasta<-na.omit(fasta3)
View(finalfasta)
write.csv(finalfasta, "../Regional-Mouse-Biogeography-Analysis/UCLA_aligned_dna_sequences.csv")
newmeta=read.csv("../Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/Sequencing Run Overlap ASV and Metadata - Regional-Overlap-Metadata.csv", header=T,row.names=1)
newmeta=as.data.frame(newmeta)
filtereddata=read.csv("../Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/Sequencing Run Overlap ASV and Metadata - Regional-Overlap-ASV.csv", row.names=1)
View(filtereddata)
batch=newmeta$Sequencing_Run
modcombat=model.matrix(~ Type + Site,data=newmeta)
input=as.matrix(filtereddata)
combat_adjusted_counts=ComBat_seq(input,batch=batch,group=NULL,covar_mod=modcombat)
library("sva")
combat_adjusted_counts=ComBat_seq(input,batch=batch,group=NULL,covar_mod=modcombat)
#combat_adjusted_counts=ComBat_seq(input,batch=batch,group=group)
#combat_adjusted_counts=ComBat_seq(input,batch=batch)
#write.table(combat_adjusted_counts,"...  .txt",sep='\t',col.names=NA,row.names=TRUE)
write.csv(combat_adjusted_counts,"../Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/RegionalMicrobiome-Type-Site-Overlap-ComBat-Adjusted.csv")
View(combat_adjusted_counts)
combat_adjusted_counts <- as.data.frame(combat_adjusted_counts)
### Make a taxonomy file for QIIME 2 taxa-barplots and for collapsing ASV ---
taxonomy <- readr::read_csv(here("Regional-Mouse-Biogeography-Analysis/UCLA_taxonomy_assignments.csv"))
##NOTE: Metadata file needs to exactly match the data file in the order of samples
here::i_am("../MouseBiogeography-RProj/Regional-COMBATSEQ.R")
##NOTE: Metadata file needs to exactly match the data file in the order of samples
here::i_am("../MouseBiogeography-RProj/Regional-COMBATSEQ.R")
setwd("~/Documents/biogeography/MouseBiogeography-RProj")
setwd("~/Documents/biogeography")
##NOTE: Metadata file needs to exactly match the data file in the order of samples
here::i_am("MouseBiogeography-RProj/Regional-COMBATSEQ.R")
### Make a taxonomy file for QIIME 2 taxa-barplots and for collapsing ASV ---
taxonomy <- readr::read_csv(here("Regional-Mouse-Biogeography-Analysis/UCLA_taxonomy_assignments.csv"))
taxonomy$ASV <- taxonomy$...1
View(taxonomy)
View(output)
View(output)
output$ASV <- row.names(output)
readr::write_csv(output, "../Regional-Mouse-Biogeography-Analysis/UCLA_taxonomy_assignments.csv")
readr::write_csv(output, "Regional-Mouse-Biogeography-Analysis/UCLA_taxonomy_assignments.csv")
readr::write_csv(output, here("Regional-Mouse-Biogeography-Analysis/UCLA_taxonomy_assignments.csv"))
### Make a taxonomy file for QIIME 2 taxa-barplots and for collapsing ASV ---
taxonomy <- readr::read_csv(here("Regional-Mouse-Biogeography-Analysis/UCLA_taxonomy_assignments.csv"))
aligned<- readr::read_csv(here("Regional-Mouse-Biogeography-Analysis/UCLA_aligned_dna_sequences.csv"))
View(aligned)
aligned$ASV <- aligned$`fasta3[-1, ]`
taxonomy_for_qza <- merge(taxonomy, aligned, by="ASV")
taxonomy_for_qza <- taxonomy_for_qza %>% select(c("ASV","taxonomy"))
taxonomy_for_qza <- rename(taxonomy_for_qza, c("Feature ID" = "ASV"))
taxonomy_for_qza <- rename(taxonomy_for_qza, c("Taxon" = "taxonomy"))
readr::write_delim(taxonomy_for_qza,here("Regional-Mouse-Biogeography-Analysis/UCLA_taxonomy.tsv"),delim="\t")
readr::write_delim(taxonomy_for_qza,here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/UCLA_taxonomy.tsv"),delim="\t")
readr::write_delim(taxonomy_for_qza,here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/UCLA_taxonomy.tsv"),delim="\t")
### Switch QIIME SEqs for actual ASV sequences --
combat_adjusted_counts$QIIME_seqs <- rownames(combat_adjusted_counts)
taxonomy <- aligned %>% select(c("QIIME_seqs","ASV"))
View(combat_adjusted_counts)
combat_adjusted_counts_ASV <-merge(combat_adjusted_counts, taxonomy, by="QIIME_seqs")
combat_adjusted_counts_ASV <- combat_adjusted_counts_ASV %>% select(-c("QIIME_seqs"))
combat_adjusted_counts_ASV <- combat_adjusted_counts_ASV %>%
select(ASV, everything())
combat_adjusted_counts_ASV <- rename(combat_adjusted_counts_ASV, c("#OTU.ID" = "ASV"))
View(combat_adjusted_counts_ASV)
readr::write_delim(combat_adjusted_counts_ASV,here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/RegionalMicrobiome-Type-Site-Overlap-ComBat-Adjusted.csv"), delim="\t")
readr::write_delim(combat_adjusted_counts_ASV,here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/RegionalMicrobiome-Type-Site-Overlap-ComBat-Adjusted.tsv"), delim="\t")
readr::write_delim(combat_adjusted_counts_ASV,here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/UCLA-ComBat-Adjusted-ASV.tsv"), delim="\t")
#Replace with filepath to package Microbiome.Biogeography
setwd("/home/julianne/Documents/microbiome.biogeography/")
devtools::document()
rm(list = c("find_concordant_features_across_sites",
"generate_L2_taxa_plots", "generate_L6_taxa_plots"))
library("Microbiome.Biogeography")
setwd("~/Documents/biogeography")
# change the csv file into RDS
file_path <- "Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.csv"
processed_data <- process_taxonomy_data(file_path)
View(processed_data)
readr::write_rds(processed_data, here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS"))
file_path <- "Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Mucosal_level-6.csv"
processed_data <- process_taxonomy_data(file_path)
readr::write_rds(processed_data, here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Mucosal_level-6.RDS"))
View(srun2)
setwd("~/Documents/biogeography")
#Replace with filepath to package Microbiome.Biogeography
setwd("/home/julianne/Documents/microbiome.biogeography/")
devtools::document()
library("Microbiome.Biogeography")
library(ggplot2)
library(tidyr)
library(viridis)
library(cowplot)
library(plyr)
library(dplyr)
library(rlang)
library(funrar)
library(sjmisc)
library(RColorBrewer)
library(paletteer)
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
labels_muc <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Mucosal_level-6.RDS")
library(plyr)
library(dplyr)
library(rlang)
library(funrar)
library(sjmisc)
library(RColorBrewer)
library(paletteer)
labels_lum <- Microbiome.Biogeography::get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
get_genera_from_plot <- function(filepath){
L2_lum<-readr::read_rds(here(filepath))
L2_lum<- as.matrix(L2_lum)
L2_lum<-make_relative(L2_lum)
L2_lum<-as.data.frame(t(L2_lum))
toptaxa<- rowMeans(L2_lum)
L2_lum$averageRA <-toptaxa/6
L2_lum <- L2_lum %>% mutate(keeptaxa = ifelse(averageRA >0.001, row.names(L2_lum), "Other"))
L2_lum <-select(L2_lum,-averageRA)
taxa<-L2_lum$keeptaxa
L2_lum <- select(L2_lum,-keeptaxa)
L2_lum <- as.matrix(sapply(L2_lum,as.numeric))
L2_lum <- as.data.frame(prop.table(L2_lum,2))
taxa<-gsub(".*g__","",taxa )
L2_lum$Taxa <-taxa
return(unique(L2_lum$Taxa))
}
labels_lum <- get_genera_from_plot("CS-Facility-Analysis/Taxa-Barplots/Luminal_level-6.RDS")
labels_lum <- get_genera_from_plot(filepath = "CS-Facility-Analysis/Taxa-Barplots/Luminal_level-6.RDS")
filepath <- string(filepath)
get_genera_from_plot <- function(filepath){
filepath <- string(filepath)
L2_lum<-readr::read_rds(here(filepath))
L2_lum<- as.matrix(L2_lum)
L2_lum<-make_relative(L2_lum)
L2_lum<-as.data.frame(t(L2_lum))
toptaxa<- rowMeans(L2_lum)
L2_lum$averageRA <-toptaxa/6
L2_lum <- L2_lum %>% mutate(keeptaxa = ifelse(averageRA >0.001, row.names(L2_lum), "Other"))
L2_lum <-select(L2_lum,-averageRA)
taxa<-L2_lum$keeptaxa
L2_lum <- select(L2_lum,-keeptaxa)
L2_lum <- as.matrix(sapply(L2_lum,as.numeric))
L2_lum <- as.data.frame(prop.table(L2_lum,2))
taxa<-gsub(".*g__","",taxa )
L2_lum$Taxa <-taxa
return(unique(L2_lum$Taxa))
}
labels_lum <- get_genera_from_plot("CS-Facility-Analysis/Taxa-Barplots/Luminal_level-6.RDS")
labels_lum <- get_genera_from_plot("CS-Facility-Analysis/Taxa-Barplots/Luminal_level-6.RDS")
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
get_genera_from_plot <- function(filepath){
L2_lum<-readr::read_rds(here(filepath))
L2_lum<- as.matrix(L2_lum)
L2_lum<-make_relative(L2_lum)
L2_lum<-as.data.frame(t(L2_lum))
toptaxa<- rowMeans(L2_lum)
L2_lum$averageRA <-toptaxa/6
L2_lum <- L2_lum %>% mutate(keeptaxa = ifelse(averageRA >0.001, row.names(L2_lum), "Other"))
L2_lum <-select(L2_lum,-averageRA)
taxa<-L2_lum$keeptaxa
L2_lum <- select(L2_lum,-keeptaxa)
L2_lum <- as.matrix(sapply(L2_lum,as.numeric))
L2_lum <- as.data.frame(prop.table(L2_lum,2))
taxa<-gsub(".*g__","",taxa )
L2_lum$Taxa <-taxa
return(unique(L2_lum$Taxa))
}
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
library(here)
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
library(ggplot2)
library(tidyr)
library(viridis)
library(cowplot)
library(plyr)
library(dplyr)
library(rlang)
library(funrar)
library(sjmisc)
library(RColorBrewer)
library(paletteer)
library(here)
library(readr)
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
library(here)
library(readr)
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
library(rlang)
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
## Generate a color key using paletteer colors --
test <- readr::read_rds("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
# change the csv file into RDS
file_path <- "Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.csv"
processed_data <- process_taxonomy_data(file_path)
readr::write_rds(processed_data, here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS"))
# change the csv file into RDS
file_path <- "Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.csv"
processed_data <- process_taxonomy_data(file_path)
setwd("~/Documents/biogeography")
# change the csv file into RDS
file_path <- "Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.csv"
processed_data <- process_taxonomy_data(file_path)
readr::write_rds(processed_data, here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS"))
here::i_am("MouseBiogeography-RProj/UCLA_Taxa_Barplots.R")
# change the csv file into RDS
file_path <- "Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.csv"
processed_data <- process_taxonomy_data(file_path)
readr::write_rds(processed_data, here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS"))
file_path <- "Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Mucosal_level-6.csv"
processed_data <- process_taxonomy_data(file_path)
readr::write_rds(processed_data, here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Mucosal_level-6.RDS"))
## Generate a color key using paletteer colors --
test <- readr::read_rds("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
library(funrar)
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
library(dplyr)
labels_lum <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Luminal_level-6.RDS")
labels_muc <- get_genera_from_plot("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/Mucosal_level-6.RDS")
#Find out how many taxa need to be assigned colors
labels_all <- union(labels_lum, labels_muc)
#Generate that many colors
assign_cols <- paletteer_d("ggsci::category20_d3", 18)
#Match taxa to colors and then use in scale_fill_manual
names(assign_cols)=labels_all
readr::write_rds(assign_cols,here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/taxa_barplots/assign_cols.RDS"))
## Remove DSS Samples
metadata<- readr::read_delim("Humanized-Biogeography-Analysis/Humanized Metadata - All-Humanized-Metadata.tsv",delim = "\t")
View(metadata)
## Remove DSS Samples
metadata<- readr::read_delim("Humanized-Biogeography-Analysis/Humanized Metadata.tsv.txt",delim = "\t")
ASV<-readr::read_csv(here("Humanized-Biogeography-Analysis/Humanized ASV and Taxonomy Key - feature-table.csv"))
## Remove DSS Samples
metadata<- readr::read_delim("Humanized-Biogeography-Analysis/Humanized Metadata.tsv.txt",delim = "\t")
## Remove DSS Samples
metadata<- readr::read_delim("Humanized-Biogeography-Analysis/Humanized Metadata - All-Humanized-Metadata.tsv",delim = "\t")
metadata$Sequencing_Run <- factor(metadata$Sequencing_Run)
metadata$DSS_Treatment <- factor(metadata$DSS_Treatment)
samples <- metadata %>% filter(DSS_Treatment =="No", SampleID %in% names(ASV)) %>% pull(SampleID)
final_ASV <- ASV[, samples]
write.table(final_ASV,"Humanized_ASV_for_alpha_diversity.tsv", sep="\t")
View(ASV)
## Filter by Sequencing Run
row.names(final_ASV) <- ASV$OTU.ID
ASV<-readr::read_csv(here("Humanized-Biogeography-Analysis/Humanized ASV and Taxonomy Key - feature-table.csv"))
## Remove DSS Samples
metadata<- readr::read_delim("Humanized-Biogeography-Analysis/Humanized Metadata - All-Humanized-Metadata.tsv",delim = "\t")
metadata$Sequencing_Run <- factor(metadata$Sequencing_Run)
metadata$DSS_Treatment <- factor(metadata$DSS_Treatment)
samples <- metadata %>% filter(DSS_Treatment =="No", SampleID %in% names(ASV)) %>% pull(SampleID)
final_ASV <- ASV[, samples]
write.table(final_ASV,"Humanized_ASV_for_alpha_diversity.tsv", sep="\t")
## Filter by Sequencing Run
row.names(final_ASV) <- ASV$OTU.ID
Nov2014 <- metadata%>% filter(DSS_Treatment=="No"&Sequencing_Run=="2014_Nov", X.SampleID %in% names(ASV)) %>%pull(X.SampleID)
View(final_ASV)
View(final_ASV)
ASV<-readr::read_csv(here("Humanized-Biogeography-Analysis/Humanized ASV and Taxonomy Key - feature-table.csv"))
View(ASV)
ASV<-readr::read_csv(here("Humanized-Biogeography-Analysis/Humanized ASV and Taxonomy Key - feature-table.csv"))
## Remove DSS Samples
metadata<- readr::read_delim("Humanized-Biogeography-Analysis/Humanized Metadata - All-Humanized-Metadata.tsv",delim = "\t")
metadata$Sequencing_Run <- factor(metadata$Sequencing_Run)
metadata$DSS_Treatment <- factor(metadata$DSS_Treatment)
samples <- metadata %>% filter(DSS_Treatment =="No", SampleID %in% names(ASV)) %>% pull(SampleID)
final_ASV <- ASV[, samples]
write.table(final_ASV,"Humanized_ASV_for_alpha_diversity.tsv", sep="\t")
## Filter by Sequencing Run
row.names(final_ASV) <- ASV$
Nov2014 <- metadata%>% filter(DSS_Treatment=="No"&Sequencing_Run=="2014_Nov", X.SampleID %in% names(ASV)) %>%pull(X.SampleID)
## Filter by Sequencing Run
row.names(final_ASV) <- ASV$OTU.ID
View(final_ASV)
Nov2014 <- metadata%>% filter(DSS_Treatment=="No"&Sequencing_Run=="2014_Nov", X.SampleID %in% names(ASV)) %>%pull(X.SampleID)
Nov2014 <- final_ASV[,Nov2014]
Nov2014 <- metadata%>% filter(DSS_Treatment=="No"&Sequencing_Run=="2014_Nov", X.SampleID %in% names(ASV)) %>%pull(SampleID)
Nov2014 <- metadata%>% filter(DSS_Treatment=="No"&Sequencing_Run=="2014_Nov", SampleID %in% names(ASV)) %>%pull(SampleID)
Nov2014 <- final_ASV[,Nov2014]
Sep2014 <- metadata%>% filter(DSS_Treatment=="No"&Sequencing_Run=="2014_Sept", SampleID %in% names(ASV)) %>%pull(SampleID)
Sep2014 <- final_ASV[,Sep2014]
Sep2015 <- metadata%>% filter(DSS_Treatment=="No"&Sequencing_Run=="2015_Sept", SampleID %in% names(ASV)) %>%pull(SampleID)
Sep2015 <- final_ASV[,Sep2015]
## Apply feature prevalence filter of 15% to each Sequencing Run dataset
#Nov2014
t_df_input_data<-as.data.frame(t(Nov2014))
ctr= 0
prevalence <- vector(mode="numeric")
for(i in 1:ncol(t_df_input_data)){
v<-t_df_input_data %>% pull(i)
for(j in 1:length(v)){
if (t_df_input_data[j,i]>0){
ctr=1+ctr
}
else {
ctr=ctr
}
}
prevalence<-append(prevalence,ctr)
ctr=0
}
Nov2014$prevalence<-prevalence #features present in at least 15 samples our of 100
Nov2014<- Nov2014 %>% filter(prevalence>=15) #[Result: 509 features, 100 samples]
#Sep2014
t_df_input_data<-as.data.frame(t(Sep2014))
ctr= 0
prevalence <- vector(mode="numeric")
for(i in 1:ncol(t_df_input_data)){
v<-t_df_input_data %>% pull(i)
for(j in 1:length(v)){
if (t_df_input_data[j,i]>0){
ctr=1+ctr
}
else {
ctr=ctr
}
}
prevalence<-append(prevalence,ctr)
ctr=0
}
70*0.15
Sep2014$prevalence<-prevalence#features present in at least 11 samples our of 70
Sep2014<- Sep2014 %>% filter(prevalence>=11) #[Result: 488 features, 70 samples]
#Sep2015
t_df_input_data<-as.data.frame(t(Sep2015))
ctr= 0
prevalence <- vector(mode="numeric")
for(i in 1:ncol(t_df_input_data)){
v<-t_df_input_data %>% pull(i)
for(j in 1:length(v)){
if (t_df_input_data[j,i]>0){
ctr=1+ctr
}
else {
ctr=ctr
}
}
prevalence<-append(prevalence,ctr)
ctr=0
}
Sep2015$prevalence<-prevalence#features present in at least 6 samples out of 43
Sep2015<- Sep2015 %>% filter(prevalence>=6) #[Result: 363 features, 43 samples]
target1 <- intersect(row.names(Nov2014),row.names(Sep2014)) #[452 features]
target <- intersect(target1, row.names(Sep2015)) #[263 features]
Nov2014<-Nov2014[row.names(Nov2014) %in% target,]
Sep2014<-Sep2014[row.names(Sep2014) %in% target,]
Sep2015<-Sep2015[row.names(Sep2015) %in% target,]
row.names(Nov2014) ==row.names(Sep2014)
row.names(Nov2014) ==row.names(Sep2015)
final_humanized_ASV <- cbind(Nov2014,Sep2014,Sep2015)
final_humanized_ASV <-select(final_humanized_ASV, -prevalence) #[263 features, 213 samples]
## Perform CombatSeq2 by Type and Site
newmeta <- metadata %>% filter(DSS_Treatment =="No")
batch<- as.character(newmeta$Sequencing_Run)
modcombat=model.matrix(~ Microbiota + Type + Sex + Site,data=newmeta)
input=as.matrix(final_humanized_ASV)
combat_adjusted_counts=ComBat_seq(input,batch=batch,group=NULL,covar_mod=modcombat)
###Purpose: Use only features from first dataset present in this dataset, then remove 2017_April and 2015_September Sequencing Run
###then perform CombatSeq2
library(dplyr)
library(sva)
modcombat=model.matrix(~ Microbiota + Type + Sex + Site,data=newmeta)
input=as.matrix(final_humanized_ASV)
combat_adjusted_counts=ComBat_seq(input,batch=batch,group=NULL,covar_mod=modcombat)
