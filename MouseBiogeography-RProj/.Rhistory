axis.text.x=element_blank(),
),
intersections_matrix=theme(
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
)
))
id_df_wide$count_ones <- rowSums(id_df_wide[, c(4:8)])
df_filtered <- id_df_wide[id_df_wide$count_ones >= 3, ]
df_filtered <- df_filtered[, -which(names(df_filtered) == "count_ones")]
gmm_of_interest <- df_filtered$feature
names(gmm_of_interest) <-df_filtered$annotation
### Shotgun GMM ---
# Define the file paths, cohort prefixes, and other parameters
shotgun_fp <- c("Shotgun/CS_SPF/GMM-DCvsJej-CLR-CS-ComBat-SeqRunSexSite-1-MsID/all_results.tsv",
"Shotgun/HUM_Gavage/GMM-DCvsJej-CLR-HUM-ComBat-SeqRunSexSite-1-MsID/all_results.tsv",
"Shotgun/SPF_Gavage/GMM-DCvsJej-CLR-SPF-ComBat-SeqRunSexSite-1-MsID/all_results.tsv",
"Shotgun/UCLA_O_SPF/GMM-DCvsJej-CLR-UCLA-ComBat-SeqRunLineSexSite-1-MsID/all_results.tsv")
shotgun_prefix <- c("CS SPF",
"HUM SD Gavage",
"SPF Gavage",
"UCLA O. SPF")
feature_value <- gmm_of_interest[1]
feature_annotation <- names(gmm_of_interest[1])
data <- process_gbm_files_shotgun(shotgun_fp, feature_value, shotgun_prefix,feature_annotation)
GMM_shotgun_df <- data[FALSE,]
for (i in seq_along(gmm_of_interest)){
feature_value <- gmm_of_interest[i]
feature_annotation <- names(gmm_of_interest[i])
data <- process_gbm_files_shotgun(shotgun_fp, feature_value, shotgun_prefix,feature_annotation)
GMM_shotgun_df <- rbind(data,GMM_shotgun_df)
}
res_plot <- GMM_shotgun_df%>% select(c("coef", "qval","Cohort","Annotation"))
res_plot$Annotation_Cohort <- paste0(res_plot$Annotation,"_",res_plot$Cohort)
res_plot <- unique(res_plot)
res_plot <- res_plot %>%
mutate(site = ifelse(coef< 0, "Distal_Colon", "Jejunum"))
y = tapply(res_plot$coef, res_plot$Annotation, function(y) mean(y))  # orders the genera by the highest fold change of any ASV in the genus; can change max(y) to mean(y) if you want to order genera by the average log2 fold change
y = sort(y, FALSE)   #switch to TRUE to reverse direction
res_plot$Annotation= factor(as.character(res_plot$Annotation), levels = names(y))
names(my_palette) <-levels(res_plot$Cohort)
cols=c("#440154FF", "#FDE725FF")
res_plot$Cohort <- factor(res_plot$Cohort, levels=c("HUM SD Gavage","SPF Gavage","CS SPF", "UCLA O. SPF"))
res_plot$Annotation  <- gsub("(oxidative phase)","", c(res_plot$Annotation))
res_plot %>%
arrange(Annotation) %>%
# filter(qval < 0.05, abs(coef) > 0) %>%
ggplot2::ggplot(aes(coef, Cohort, fill = site)) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black")+
geom_bar(stat = "identity") +
cowplot::theme_cowplot(12) +
theme(axis.text.y = element_text(face = "bold")) +
scale_fill_manual(values = cols) +
labs(x = "Effect size (Jejunum/Distal_Colon)",
y = "",
fill = "") +
ggtitle("Shotgun Data") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "top")+
facet_wrap(~Annotation)
res_plot$Annotation  <- gsub("\\(oxidative phase)","", c(res_plot$Annotation))
res_plot %>%
arrange(Annotation) %>%
# filter(qval < 0.05, abs(coef) > 0) %>%
ggplot2::ggplot(aes(coef, Cohort, fill = site)) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black")+
geom_bar(stat = "identity") +
cowplot::theme_cowplot(12) +
theme(axis.text.y = element_text(face = "bold")) +
scale_fill_manual(values = cols) +
labs(x = "Effect size (Jejunum/Distal_Colon)",
y = "",
fill = "") +
ggtitle("Shotgun Data") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "top")+
facet_wrap(~Annotation)
###Running of MelonnPan
df<-read.delim(here("Shotgun/relab_normalized/merged_humann_genefamilies_relab_unstratified.tsv"))
library(melonnpan)
library(here)
library(stringr)
###Running of MelonnPan
df<-read.delim(here("Shotgun/relab_normalized/merged_humann_genefamilies_relab_unstratified.tsv"))
here::i_am("MouseBiogeography-RProj/MelonnPan.R")
###Running of MelonnPan
df<-read.delim(here("Shotgun/relab_normalized/merged_humann_genefamilies_relab_unstratified.tsv"))
df <- df %>%
filter(!str_detect(X..Gene.Family, 'UNMAPPED')) %>%
filter(!str_detect(X..Gene.Family, 'UNGROUPED'))
shotgun_dat <- as.data.frame(t(df))
names(shotgun_dat)
shotgun_dat[2,]
shotgun_dat[,2]
shotgun_dat[,1]
row.names(shotgun_dat)
melonnpan::melonnpan.predict(metag = shotgun_dat,
output = here("Shotgun/melonnpan"))
row.names(df)[1:10]
df$X..Gene.Family[1:10]
shotgun_dat <- as.data.frame(t(df),row.names=1)
renv::install("devtools")
devtools::install_github("borenstein-lab/mimosa2")
library(devtools)
getwd()
setwd("~/Documents/biogeography")
devtools::install_github("borenstein-lab/mimosa2")
library(devtools)
renv::install("devtools")
library(devtools)
library(mimosa2)
devtools::install_github("borenstein-lab/mimosa2")
install.packages("biomartr")
install.packages("biomartr")
BiocManager::install("biomaRt")
install.packages("qvalue")
BiocManager::install("qvalue")
devtools::install_github("borenstein-lab/mimosa2")
BiocManager::install("ggnetwork")
BiocManager::install("ggnetwork")
devtools::install_github("borenstein-lab/mimosa2")
library(mimosa)
library(melonnpan)
library(here)
library(stringr)
library(Maaslin2)
## UCLA O. SPF --
microbiome <- read.delim(here("Regional-Mouse-Biogeography-Analysis/picrust_output/UCLA_O_SPF_KO_counts.tsv"), row.names=1)
microbiome <- microbiome %>%
mutate(across(everything(), ~ . / sum(., na.rm = TRUE)))
setwd("~/Documents/biogeography")
here::i_am("MouseBiogeography-RProj/Melonnpan_Predict.R")
## UCLA O. SPF --
microbiome <- read.delim(here("Regional-Mouse-Biogeography-Analysis/picrust_output/UCLA_O_SPF_KO_counts.tsv"), row.names=1)
microbiome <- microbiome %>%
mutate(across(everything(), ~ . / sum(., na.rm = TRUE)))
input_metadata <-read.delim(here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/starting_files/Regional-Combat-Metadata.tsv"),header=TRUE, row.names=1) #mapping file
target <- colnames(microbiome)
input_metadata = input_metadata[match(target, row.names(input_metadata)),]
target == row.names(input_metadata)
df_input_metadata <- as.data.frame(input_metadata)
df_input_metadata$Sequencing_Run <- factor(df_input_metadata$Sequencing_Run)
df_input_metadata$Line <- factor(df_input_metadata$Line)
df_input_metadata$MouseID_Line <- factor(df_input_metadata$MouseID_Line)
df_input_metadata$Sex <- factor(df_input_metadata$Sex)
df_input_metadata$Type <- factor(df_input_metadata$Type, levels=c("Luminal", "Mucosal"))
df_input_metadata$SampleID <- row.names(df_input_metadata)
df_input_metadata$Site_General <- factor(df_input_metadata$Site_General, levels=c("Colon","SI"))
samples <- df_input_metadata %>%
filter(SampleID %in% names(microbiome)) %>%
filter(Type=="Luminal") %>%
pull(SampleID)
df_input_data <- microbiome[,samples]
df_input_data <- filter_features(df_input_data)
filter_features <- function(df, threshold = 0.0001, min_percentage = 0.10) {
# Store the row names (features)
#feature_names <- rownames(df)
# Calculate the number of samples where the feature is above the threshold
num_samples_above_threshold <- rowSums(df > threshold)
# Find the minimum number of samples required based on the percentage
min_samples <- ncol(df) * min_percentage
# Filter out features that are below the threshold in â‰¥10% of samples
filtered_df <- df[num_samples_above_threshold >= min_samples, ]
# Reassign the row names to the filtered dataframe
#rownames(filtered_df) <- feature_names[num_samples_above_threshold >= min_samples]
return(filtered_df)
}
res <- read.delim(here("Regional-Mouse-Biogeography-Analysis/melonnpan/Luminal-SeqRun-Line-Sex-Site_General_1-MouseID/significant_results.tsv"))
View(res)
res_signif <- res %>%
filter(metadata="Site_General") %>%
filter(qval < 0.05) %>%
filter(abs(coef) > 1)
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05) %>%
filter(abs(coef) > 1)
View(res_signif)
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05) %>%
filter(abs(coef) > 0.5)
View(res_signif)
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05) %>%
filter(abs(coef) > 0.25)
View(res_signif)
View(res_signif)
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05) %>%
filter(abs(coef) > 0.10)
View(res_signif)
View(res_signif)
ggplot(res_signif, aes(x = coef, y = feature, fill = value)) +
geom_bar(stat = 'identity', position = 'dodge') +  # Create horizontal bars
#scale_fill_manual(values = c('SI' = 'blue', 'colon' = 'orange')) +  # Custom colors
labs(x = 'Coefficient', y = 'Feature', title = 'UCLA O. SPF Luminal Metabolites') +
theme_cowplot(16)
library(cowplot)
ggplot(res_signif, aes(x = coef, y = feature, fill = value)) +
geom_bar(stat = 'identity', position = 'dodge') +  # Create horizontal bars
#scale_fill_manual(values = c('SI' = 'blue', 'colon' = 'orange')) +  # Custom colors
labs(x = 'Coefficient', y = 'Feature', title = 'UCLA O. SPF Luminal Metabolites') +
theme_cowplot(16)
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05) %>%
filter(abs(coef) > 0.25)
ggplot(res_signif, aes(x = coef, y = feature, fill = value)) +
geom_bar(stat = 'identity', position = 'dodge') +  # Create horizontal bars
#scale_fill_manual(values = c('SI' = 'blue', 'colon' = 'orange')) +  # Custom colors
labs(x = 'Coefficient', y = 'Feature', title = 'UCLA O. SPF Luminal Metabolites') +
theme_cowplot(16)
View(res_signif)
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05) %>%
filter(abs(coef) > 0.10)
res_signif$feature
lum_mets <- ucla_o_spf_result$pred
View(res_signif)
## UCLA O. SPF --
microbiome <- read.delim(here("Regional-Mouse-Biogeography-Analysis/picrust_output/UCLA_O_SPF_KO_counts.tsv"), row.names=1)
microbiome <- microbiome %>%
mutate(across(everything(), ~ . / sum(., na.rm = TRUE)))
input_metadata <-read.delim(here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/starting_files/Regional-Combat-Metadata.tsv"),header=TRUE, row.names=1) #mapping file
target <- colnames(microbiome)
input_metadata = input_metadata[match(target, row.names(input_metadata)),]
target == row.names(input_metadata)
df_input_metadata <- as.data.frame(input_metadata)
df_input_metadata$Sequencing_Run <- factor(df_input_metadata$Sequencing_Run)
df_input_metadata$Line <- factor(df_input_metadata$Line)
df_input_metadata$MouseID_Line <- factor(df_input_metadata$MouseID_Line)
df_input_metadata$Sex <- factor(df_input_metadata$Sex)
df_input_metadata$Type <- factor(df_input_metadata$Type, levels=c("Luminal", "Mucosal"))
df_input_metadata$SampleID <- row.names(df_input_metadata)
df_input_metadata$Site_General <- factor(df_input_metadata$Site_General, levels=c("Colon","SI"))
samples <- df_input_metadata %>%
filter(SampleID %in% names(microbiome)) %>%
filter(Type=="Luminal") %>%
pull(SampleID)
df_input_data <- microbiome[,samples]
df_input_data <- filter_features(df_input_data)
# Predict Metabolite Compostion -
ucla_o_spf_result <- predict_metabolites(
df_input = df_input_data,
weights_path = here("Shotgun/melonnpan/MelonnPan_Trained_Weights.txt"),
output_dir = here("Regional-Mouse-Biogeography-Analysis/melonnpan/"),
train_metag = microbiome_train
)
library(melonnpan)
library(here)
library(stringr)
library(Maaslin2)
here::i_am("MouseBiogeography-RProj/Melonnpan_Predict.R")
microbiome_train <- readRDS(here("../melonnpan_data/microbiome_training_data.RDS"))
# Predict Metabolite Compostion -
ucla_o_spf_result <- predict_metabolites(
df_input = df_input_data,
weights_path = here("Shotgun/melonnpan/MelonnPan_Trained_Weights.txt"),
output_dir = here("Regional-Mouse-Biogeography-Analysis/melonnpan/"),
train_metag = microbiome_train
)
# Predict Metabolite Compostion -
ucla_o_spf_result <- Melonnpan::predict_metabolites(
df_input = df_input_data,
weights_path = here("Shotgun/melonnpan/MelonnPan_Trained_Weights.txt"),
output_dir = here("Regional-Mouse-Biogeography-Analysis/melonnpan/"),
train_metag = microbiome_train
)
library(melonnpan)
library(here)
library(stringr)
library(Maaslin2)
# Predict Metabolite Compostion -
ucla_o_spf_result <- Melonnpan::predict_metabolites(
df_input = df_input_data,
weights_path = here("Shotgun/melonnpan/MelonnPan_Trained_Weights.txt"),
output_dir = here("Regional-Mouse-Biogeography-Analysis/melonnpan/"),
train_metag = microbiome_train
)
# Predict Metabolite Compostion -
ucla_o_spf_result <- predict_metabolites(
df_input = df_input_data,
weights_path = here("Shotgun/melonnpan/MelonnPan_Trained_Weights.txt"),
output_dir = here("Regional-Mouse-Biogeography-Analysis/melonnpan/"),
train_metag = microbiome_train
)
# Predict Metabolite Compostion -
ucla_o_spf_result <- melonnpan::predict_metabolites(
df_input = df_input_data,
weights_path = here("Shotgun/melonnpan/MelonnPan_Trained_Weights.txt"),
output_dir = here("Regional-Mouse-Biogeography-Analysis/melonnpan/"),
train_metag = microbiome_train
)
read.delim(here("Regional-Mouse-Biogeography-Analysis/melonnpan/MelonnPan_Predicted_Metabolites.txt"))
lum_mets <- read.delim(here("Regional-Mouse-Biogeography-Analysis/melonnpan/MelonnPan_Predicted_Metabolites.txt"))
View(lum_mets)
lum_mets <- lum_mets %>%
column_to_rownames("ID")
lum_mets <- as.data.frame(t(lum_mets))
lum_meta <- df_input_metadata %>%
filter(SampleID %in% names(microbiome)) %>%
filter(Type=="Luminal")
site_fe <- c("Sequencing_Run", "Line","Sex", "Type")
ranef <- c("MouseID_Line")
refs <- c("Sequencing_Run,Hiseq_April_Nineteen","Line,ItgCre","Site,Distal_Colon")
fit_data = Maaslin2(input_data=lum_mets,
input_metadata=lum_meta,
output = here("Regional-Mouse-Biogeography-Analysis/melonnpan/Luminal-SeqRun-Line-Sex-Site_General_1-MouseID"),
fixed_effects = c("Sequencing_Run","Line","Sex", "Site_General"),
random_effects = c("MouseID_Line"),
reference =  c("Sequencing_Run,Hiseq_April_Nineteen","Line,ItgCre","Site,Distal_Colon"),
min_prevalence=0.15,
#analysis_method = "LM",
normalization="clr", transform ="none",plot_heatmap = FALSE,plot_scatter = FALSE)
fit_data = Maaslin2(input_data=lum_mets,
input_metadata=lum_meta,
output = here("Regional-Mouse-Biogeography-Analysis/melonnpan/Luminal-SeqRun-Line-Sex-Site_General_1-MouseID"),
fixed_effects = c("Sex", "Site_General"),
random_effects = c("MouseID_Line"),
reference =  c("Sequencing_Run,Hiseq_April_Nineteen","Line,ItgCre","Site,Distal_Colon"),
min_prevalence=0.15,
#analysis_method = "LM",
normalization="clr", transform ="none",plot_heatmap = FALSE,plot_scatter = FALSE)
fit_data = Maaslin2(input_data=lum_mets,
input_metadata=lum_meta,
output = here("Regional-Mouse-Biogeography-Analysis/melonnpan/Luminal-SeqRun-Line-Sex-Site_General_1-MouseID"),
fixed_effects = c("Sex", "Site_General"),
random_effects = c("MouseID_Line"),
reference =  c("Sequencing_Run,Hiseq_April_Nineteen","Line,ItgCre","Site,Distal_Colon"),
min_prevalence=0.15,
#analysis_method = "LM",
normalization="none", transform ="none",plot_heatmap = FALSE,plot_scatter = FALSE)
fit_data = Maaslin2(input_data=lum_mets,
input_metadata=lum_meta,
output = here("Regional-Mouse-Biogeography-Analysis/melonnpan/Luminal-SeqRun-Line-Sex-Site_General_1-MouseID"),
fixed_effects = c("Sequencing_Run","Line","Sex", "Site_General"),
random_effects = c("MouseID_Line"),
reference =  c("Sequencing_Run,Hiseq_April_Nineteen","Line,ItgCre","Site,Distal_Colon"),
min_prevalence=0.15,
#analysis_method = "LM",
normalization="none", transform ="log",plot_heatmap = FALSE,plot_scatter = FALSE)
View(res_signif)
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05)
View(res_signif)
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05) %>%
filter(abs(coef) > 0.10)
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05) %>%
filter(abs(coef) > 1)
library(melonnpan)
library(here)
library(stringr)
## UCLA O. SPF --
microbiome <- read.delim(here("Regional-Mouse-Biogeography-Analysis/picrust_output/UCLA_O_SPF_KO_counts.tsv"), row.names=1)
microbiome <- microbiome %>%
mutate(across(everything(), ~ . / sum(., na.rm = TRUE)))
input_metadata <-read.delim(here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/starting_files/Regional-Combat-Metadata.tsv"),header=TRUE, row.names=1) #mapping file
target <- colnames(microbiome)
input_metadata = input_metadata[match(target, row.names(input_metadata)),]
target == row.names(input_metadata)
df_input_metadata <- as.data.frame(input_metadata)
df_input_metadata$Sequencing_Run <- factor(df_input_metadata$Sequencing_Run)
df_input_metadata$Line <- factor(df_input_metadata$Line)
df_input_metadata$MouseID_Line <- factor(df_input_metadata$MouseID_Line)
df_input_metadata$Sex <- factor(df_input_metadata$Sex)
df_input_metadata$Type <- factor(df_input_metadata$Type, levels=c("Luminal", "Mucosal"))
df_input_metadata$SampleID <- row.names(df_input_metadata)
df_input_metadata$Site_General <- factor(df_input_metadata$Site_General, levels=c("Colon","SI"))
samples <- df_input_metadata %>%
filter(SampleID %in% names(microbiome)) %>%
filter(Type=="Luminal") %>%
pull(SampleID)
df_input_data <- microbiome[,samples]
df_input_data <- filter_features(df_input_data)
# Predict Metabolite Compostion -
ucla_o_spf_result <- melonnpan::predict_metabolites(
df_input = df_input_data,
weights_path = here("Shotgun/melonnpan/MelonnPan_Trained_Weights.txt"),
output_dir = here("Regional-Mouse-Biogeography-Analysis/melonnpan/"),
train_metag = microbiome_train
)
# Predict Metabolite Compostion -
ucla_o_spf_result <- melonnpan::melonnpan.predict(
df_input = df_input_data,
weights_path = here("Shotgun/melonnpan/MelonnPan_Trained_Weights.txt"),
output_dir = here("Regional-Mouse-Biogeography-Analysis/melonnpan/"),
train_metag = microbiome_train
)
### Run Melonnpan using pretrained model ---
predict_metabolites <- function(df_input, weights_path, output_dir, train_metag, threshold = 0.01/100, sample_fraction = 0.10) {
# Check if df_input is a file path or a dataframe
if (is.character(df_input)) {
# If it's a file path, read the file
df <- read.delim(df_input, row.names = 1)
} else if (is.data.frame(df_input)) {
# If it's already a dataframe, use it directly
df <- df_input
} else {
stop("df_input must be either a file path or a dataframe")
}
# Read in the normalized data and transpose it
shotgun_dat <- as.data.frame(t(df))
shotgun_dat <- shotgun_dat[,-1]
# Read in the trained weights
weights <- read.delim(weights_path)
# Find overlapping IDs
overlap <- intersect(names(shotgun_dat), weights$ID)
# Filter data based on abundance threshold and prevalence across samples
binary_abundance <- shotgun_dat > threshold
proportion_samples <- colMeans(binary_abundance)
filtered_data <- shotgun_dat[, proportion_samples >= sample_fraction]
# Predict metabolites using MelonnPan
metabolites <- melonnpan::melonnpan.predict(metag = filtered_data,
output = output_dir,
weight.matrix = weights_path,
train.metag = train_metag)
return(metabolites)
}
input_metadata <-read.delim(here("Regional-Mouse-Biogeography-Analysis/2021-8-Microbiome-Batch-Correction-Analysis/starting_files/Regional-Combat-Metadata.tsv"),header=TRUE, row.names=1) #mapping file
target <- colnames(microbiome)
input_metadata = input_metadata[match(target, row.names(input_metadata)),]
target == row.names(input_metadata)
df_input_metadata <- as.data.frame(input_metadata)
df_input_metadata$Sequencing_Run <- factor(df_input_metadata$Sequencing_Run)
df_input_metadata$Line <- factor(df_input_metadata$Line)
df_input_metadata$MouseID_Line <- factor(df_input_metadata$MouseID_Line)
df_input_metadata$Sex <- factor(df_input_metadata$Sex)
df_input_metadata$Type <- factor(df_input_metadata$Type, levels=c("Luminal", "Mucosal"))
df_input_metadata$SampleID <- row.names(df_input_metadata)
df_input_metadata$Site_General <- factor(df_input_metadata$Site_General, levels=c("Colon","SI"))
samples <- df_input_metadata %>%
filter(SampleID %in% names(microbiome)) %>%
filter(Type=="Luminal") %>%
pull(SampleID)
df_input_data <- microbiome[,samples]
# Predict Metabolite Compostion -
ucla_o_spf_result <- melonnpan::melonnpan.predict(
df_input = df_input_data,
weights_path = here("Shotgun/melonnpan/MelonnPan_Trained_Weights.txt"),
output_dir = here("Regional-Mouse-Biogeography-Analysis/melonnpan/"),
train_metag = microbiome_train
)
# Predict Metabolite Compostion -
ucla_o_spf_result <- predict_metabolites(
df_input = df_input_data,
weights_path = here("Shotgun/melonnpan/MelonnPan_Trained_Weights.txt"),
output_dir = here("Regional-Mouse-Biogeography-Analysis/melonnpan/"),
train_metag = microbiome_train
)
View(ucla_o_spf_result)
lum_mets <- ucla_o_spf_result$pred
lum_mets <- lum_mets %>%
column_to_rownames("ID")
View(lum_mets)
lum_mets <- as.data.frame(t(lum_mets))
lum_meta <- df_input_metadata %>%
filter(SampleID %in% names(microbiome)) %>%
filter(Type=="Luminal")
site_fe <- c("Sequencing_Run", "Line","Sex", "Type")
ranef <- c("MouseID_Line")
fit_data = Maaslin2(input_data=lum_mets,
input_metadata=lum_meta,
output = here("Regional-Mouse-Biogeography-Analysis/melonnpan/Luminal-SeqRun-Line-Sex-Site_General_1-MouseID"),
fixed_effects = c("Sequencing_Run","Line","Sex", "Site_General"),
random_effects = c("MouseID_Line"),
reference =  c("Sequencing_Run,Hiseq_April_Nineteen","Line,ItgCre","Site,Distal_Colon"),
min_prevalence=0.15,
#analysis_method = "LM",
normalization="none", transform ="log",plot_heatmap = FALSE,plot_scatter = FALSE)
library(Maaslin2)
fit_data = Maaslin2(input_data=lum_mets,
input_metadata=lum_meta,
output = here("Regional-Mouse-Biogeography-Analysis/melonnpan/Luminal-SeqRun-Line-Sex-Site_General_1-MouseID"),
fixed_effects = c("Sequencing_Run","Line","Sex", "Site_General"),
random_effects = c("MouseID_Line"),
reference =  c("Sequencing_Run,Hiseq_April_Nineteen","Line,ItgCre","Site,Distal_Colon"),
min_prevalence=0.15,
#analysis_method = "LM",
normalization="none", transform ="log",plot_heatmap = FALSE,plot_scatter = FALSE)
res <- read.delim(here("Regional-Mouse-Biogeography-Analysis/melonnpan/Luminal-SeqRun-Line-Sex-Site_General_1-MouseID/significant_results.tsv"))
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05) %>%
filter(abs(coef) > 1)
res_signif <- res %>%
filter(metadata=="Site_General") %>%
filter(qval < 0.05)
View(res_signif)
res <- read.delim(here("Regional-Mouse-Biogeography-Analysis/melonnpan/Luminal-SeqRun-Line-Sex-Site_General_1-MouseID/all_results.tsv"))
View(res)
res_signif <- res %>%
filter(metadata=="Sex") %>%
filter(qval < 0.05)
res_signif <- res %>%
filter(metadata=="Line") %>%
filter(qval < 0.05)
res_signif <- res %>%
filter(metadata=="Sequencing_Run") %>%
filter(qval < 0.05)
res_signif <- res %>%
filter(metadata=="Sequencing_Run")
res_signif <- res %>%
filter(metadata=="Sex")
